/* File: ParallexGameObject.js 
 *
 * Represent an GameObject located at some distance D away, thus 
 * resulting in slower movements
 * 
 * D: is set for the camera Window Size if the camera window size should change
 *    D will vary linearly
 *    
 * Introduces the Parallax space: displacemet is simply t/D where t is WC displacement
 */

/*jslint node: true, vars: true, white: true */
/*global gEngine, TiledGameObject, vec2  */
/* find out more about jslint: http://www.jslint.com/help.html */

"use strict";  // Operate in Strict mode such that variables must be declared before used!

function ParallaxGameObject(renderableObj, distant) {
    this.mSaveT = vec2.fromValues(0, 0);
    this.mDistant = distant;  // for now, this is constnat across all cameras
    this.mParallaxScale = 1;
    this._distantCheck();
    
    TiledGameObject.call(this, renderableObj);
}
gEngine.Core.inheritPrototype(ParallaxGameObject, TiledGameObject);

//
// renderableObj xfrom is accessible, it is in WC space!!
// GameObject parameters: speed and direction are all in WC space
//

ParallaxGameObject.prototype.draw = function (aCamera) {
    if (this.isVisible()) {
        var xf = this.getXform();
        this.mSaveT[0] = xf.getXPos();
        this.mSaveT[1] = xf.getYPos();
        xf.setXPos( this.mSaveT[0] * this.parallaxScale);
        xf.setYPos( this.mSaveT[1] * this.parallaxScale);
        TiledGameObject.prototype.draw.call(this, aCamera);
        xf.setXPos( this.mSaveT[0]);
        xf.setYPos( this.mSaveT[1]);
    }
};


ParallaxGameObject.prototype.getDistance = function () {
    return this.mDistant;
};
ParallaxGameObject.prototype.setDistance = function (d) {
    this.mDistant = d;
    this._distantCheck();
};
ParallaxGameObject.prototype.incDistance = function (delta) {
    this.mDistant += delta;
    this._distantCheck();
};

ParallaxGameObject.prototype._distantCheck = function() {
    if (this.mDistant <= 1) {
        this.mDistant = 1;
    }
    this.parallaxScale = 1/this.mDistant;
};